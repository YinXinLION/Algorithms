/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
  		boolean result = false;
        //当result为false时，不直接结束程序，而是继续遍历其他节点，直到把所有点遍历完
        if(root1 != null && root2 != null){
            if(root1.val == root2.val){//一旦找到有相同的节点，则进行递归遍历
       			result = DoesHasSubTree(root1,root2);
            }
            if(!result){//如果result为false那么再找右孩子
                result = HasSubtree(root1.left, root2);
            }
            if(!result){//如果result还是为false说明左子树没找到，找右子树
                result = HasSubtree(root1.right,root2);
            }
                
        }      
        return result;
        
    }
    public boolean DoesHasSubTree(TreeNode root1, TreeNode root2){
        if(root2 == null)
            return true;
    //当result为false时，不直接结束程序，而是继续遍历其他节点，直到把所有点遍历完       if(root1 == null){
            return false;
        }
        if(root1.val != root2.val){
           	return false;
        }
        return DoesHasSubTree(root1.left,root2.left) && DoesHasSubTree(root1.right,root2.right);
        
    }
}